#!/usr/bin/env node

var request = require('request');
var colors = require('colors');
var byline = require('byline');
var fs = require('fs');
var XSDifyJSONSchema = require('../lib/XSDifyJSONSchema')

var start = new Date();

if (process.stdin.isTTY) {
	// handle shell arguments
	var argv = require('minimist')(process.argv.slice(2));
	var filepath = argv._[0] || argv.f;
	var url = argv.u;
	var help = argv.h;
	if (filepath != undefined) {
		processFromFile(filepath);
	}
	else if (url != undefined) {
		processFromUrl(url);
	}
	else {
		printHelp();
	}
} else {
	// handle piped content 
	var input = [];
	var stream = byline(process.stdin);
	stream.on("data", function (line) {
		input.push(line + "");
	}).on("end", function () {
		processInput(input.join("\n"));
	});
}

function processFromFile(filepath) {
	fs.readFile(filepath, 'utf8', function (err, data) {
		if (err) {
			return console.log(err);
		}
		processInput(data);
	});
}

function processFromUrl(url) {
	request(url, function (error, response, data) {
		if (!error && response.statusCode == 200) {
			processInput(data);
		}
	})
}

function processInput(data) {
	var jsonData;
	try {
		jsonData = JSON.parse(data);
	} catch (e) {
		process.stderr.write(colors.red("ERROR: Unable to parse JSON schema! Invalid JSON data structure!\n\n"));
		process.exit();
	}

	console.log(XSDifyJSONSchema(jsonData));

	//var end = new Date() - start;
	//console.log(colors.green("Execution time: " + end + "ms"));
}

function printHelp() {
	var help = "Usage:\n" + //
		"J2Xv2 <file>\n" + //
		"J2Xv2 -f <file>\n" + //
		"J2Xv2 -u <file>\n" + //
		"J2Xv2:\n" + //
		"\t-f if you want to process a file. default\n" + //
		"\t-u if you want to process from a given URL\n" + //
		"\t-h this help\n" + //
		"\n" + //
		"*** J2Xv2 also supports pipe in data. e.g. echo \"Hello\" | J2Xv2\n";

	console.log(help);
}