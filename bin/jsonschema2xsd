#!/usr/bin/env node

var request = require('request');
var util = require('util');
var colors = require('colors');
var jpath = require('jsonpath');
var byline = require('byline');
var fs = require('fs');
var XMLWriter = require('xml-writer');
var pd = require('pretty-data').pd;

var out;
var tab = [];
var xw = new XMLWriter;
var start = new Date();
var schemaProps = [ 
	"type",
	"enum",
	"$schema",
	"additionalProperties",
	"required",
	"definitions",
	"default",
	"description"
];  

if (process.stdin.isTTY) {
  // handle shell arguments
	var argv = require('minimist')(process.argv.slice(2));
	var filepath = argv._[0] || argv.f;
	var url = argv.u;
	var help = argv.h;
	if(filepath != undefined){
		processFromFile(filepath);
	} 
	else if(url != undefined){
		processFromUrl(url);
	}
	else {
		printHelp();
	}	
} else {
  // handle piped content 
	var input = [];
	var stream = byline(process.stdin);
	stream.on("data", function (line) {
		input.push(line + "");
	}).on("end", function () {
		processInput(input.join("\n"));
	});
}

function processFromFile(filepath){
	fs.readFile(filepath, 'utf8', function (err,data) {
		if (err) {
			return console.log(err);
		}
		processInput(data);
	});
}

function processFromUrl(url){
	request(url, function (error, response, data) {
		if (!error && response.statusCode == 200) {
			processInput(data);
		}
	})
}

function processInput(data){
	var jsonData;
	try {
		jsonData = JSON.parse(data);
	} catch (e) {
		process.stderr.write(colors.red("ERROR: Unable to parse JSON schema! Invalid JSON data structure!\n\n"));
		process.exit();
	}
	
	xw.startDocument();
	xw.writeAttribute("encoding", "UTF-8");
	xw.startElement("xs:schema");
	xw.writeAttribute("xmlns:xs", "http://www.w3.org/2001/XMLSchema");
	processData(jsonData, undefined);
	xw.endElement();
	xw.endDocument();
	console.log(pd.xml(xw.toString()));
	//var end = new Date() - start;
	//console.log(colors.green("Execution time: " + end + "ms"));
}

function element(name, type){
	xw.startElement("xs:element");
	xw.writeAttribute("name", name);
	xw.endElement();
}

function intRestrictions(minimum, maximum){
	xw.startElement("xs:simpleType");
	xw.startElement("xs:restriction");
	xw.writeAttribute("base", "xs:integer");
	if(undefined != minimum){
		xw.startElement("xs:minInclusive");
		xw.writeAttribute("value", minimum);
	}
	if(undefined != maximum){
		xw.startElement("xs:maxInclusive");
		xw.writeAttribute("value", maximum);
	}
	xw.endElement();
	xw.endElement();			
	tab.pop();
}

function processData(input, property){	
	var title = jpath.value(input, "$.title");	
	var type = jpath.value(input, "$.type");
	var properties = jpath.value(input, "$.properties");
	var required = jpath.value(input, "$.required");
	var nullable = jpath.value(input, "$.nullable");
	var minimum =  jpath.value(input, "$.minimum");
	var maximum =  jpath.value(input, "$.maximum");

	if(typeof input == "object" && !property){			
		if("object" == type &&  typeof properties == "object"){
			element(title, undefined);
			complexType(input);
		} else {
			for(var name in input){
				processData(input[name], name);
			}
		}
	} else {
		element(property, type);
		if("integer" == type){
			intRestrictions(minimum, maximum);
		}
	}
}

function complexType(input){
	xw.startElement("xs:complexType");
	xw.writeAttribute("name", ((input && input.title) ? input.title : ""));
	xw.startElement("xs:sequence");
	for(var name in input){
		if (typeof input[name] == "object" && !~schemaProps.indexOf(name)) {
			processData(input[name], undefined);
		}		
	}
	xw.endElement();
	xw.endElement();
}

function simpleType(input){
	for(var name in input){
		processData(input[name], name);
	}
}

function printHelp() {
	var help = "Usage:\n" + //
		"jsonschema2xsd <file>\n" + //
		"jsonschema2xsd -f <file>\n" + //
		"jsonschema2xsd -u <file>\n" + //
		"jsonschema2xsd:\n" + //
		"\t-f if you want to process a file. default\n" + //
		"\t-u if you want to process from a given URL\n" + //
		"\t-h this help\n" + //
		"\n" + //
		"*** jsonschema2xsd also supports pipe in data. e.g. echo \"Hello\" | jsonschema2xsd\n";

	console.log(help);
}