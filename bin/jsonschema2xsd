#!/usr/bin/env node

var request = require('request');
var colors = require('colors');
var byline = require('byline');
var fs = require('fs');
var XSDifyJSONSchema = require('../lib/XSDifyJSONSchema')
//var xsd = require('libxml-xsd');

var start = new Date();
var argv = require('minimist')(process.argv.slice(2));

if (process.stdin.isTTY) {
	// handle shell arguments
	var filepath = argv._[0] || argv.f;
	var url = argv.u;

	if (filepath != undefined) {
		processFromFile(filepath);
	}
	else if (url != undefined) {
		processFromUrl(url);
	}
	else {
		printHelp();
	}
} else {
	// handle piped content 
	var input = [];
	var stream = byline(process.stdin);
	stream.on("data", function (line) {
		input.push(line + "");
	}).on("end", function () {
		processInput(input.join("\n"));
	});
}

function processFromFile(filepath) {
	fs.readFile(filepath, 'utf8', function (err, data) {
		if (err) {
			return console.log(err);
		}
		processInput(data);
	});
}

function processFromUrl(url) {
	request(url, function (error, response, data) {
		if (!error && response.statusCode == 200) {
			processInput(data);
		}
	})
}

function processInput(data) {
	var jsonData;
	try {
		jsonData = JSON.parse(data);
	} catch (e) {
		process.stderr.write(colors.red("ERROR: Unable to parse JSON schema! Invalid JSON data structure!\n\n"));
		process.exit();
	}

	var options = {
		"targetNamespace": argv.t,
		"xmlNamespace": argv.x,
		"elementFormDefault": argv.e,
		"rootElement": argv.r 
	};

	var XSDString = XSDifyJSONSchema(jsonData, options);
	console.log(XSDString);
	
	//var end = new Date() - start;
	//process.stdout.write(colors.green("\nConversion Execution time: " + end + "ms\n"));
	/*try {
		var schema = xsd.parse(XSDString); 
	} catch (e) {
		process.stderr.write(colors.red(e+"\n\n"));
		process.exit();
	}*/

	//
	//console.log(colors.green("Execution time: " + end + "ms"));
}

function printHelp() {
	var help = "Usage:\tjsonschema2xsd [filepath|-f filepath|-u filepath] [options]\n" + 
		"\tjsonschema2xsd <filepath>\n\n" + 
		
		"Options:\n" + 
		"  -f  <filepath>   Convert JSON schema to XSD using given a filepath.\n" + 
		"  -u  <filepath>   Convert JSON schema to XSD from a given URL\n" +
		"  -r               Set Root Element or  the top level/global element name.(optional)\n" +
		"					If not specified, we will provide a default 'ROOT_OBJECT."
		"                   e.g. -b SupplierBO\n" +
		"                   If your JSON schema has no top level/global name, then\n" +  
		"                   you should specify this option in order to have a valid schema.\n\n" +
		"  -t               Set target namespace. (optional)\n" +
		"  -x               Set XML namespace. (optional)\n" +
		"  -e               Set elementFormDefault. (optional)\n" +  
		"  -h               Displays this help\n" + 
		"\n\n" +
		"  jsonschema2xsd -f jsonschema.json -b SupplierInfo -t http://../../SupplierInfo.xsd -x http://../../SupplierInfo.xsd -e qualified\n" +
		"  <?xml version=\"1.0\"?>\n" +
		"    <xs:schema\n" +
		"        targetNamespace=\"http://../../SupplierInfo.xsd\"\n" + 
  		"        xmlns:xs=\"http://../../SupplierInfo.xsd\"\n" +
		"        elementFormDefault=\"qualified\">\n" +
        "          <xs:element name=\"SupplierInfo\">\n" + 
		"          ....\n" +
		"    </schema>"+
		"\n\n" +  
		"Note:\n" + 
		"   jsonschema2xsd also supports pipe in data.\n" +
		"   e.g. echo '{\"message\": {\"type\":\"string\"}}' | jsonschema2xsd\n";

	console.log(help);
}